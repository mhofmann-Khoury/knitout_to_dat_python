# =============================================================================
# TEST RELEASE TO TEST PYPI WORKFLOW
# =============================================================================
# This workflow builds and publishes your package to Test PyPI for testing
# before doing a real release to the main PyPI repository.
#
# WHEN THIS RUNS:
# - When you create a GitHub Release (published)
# - When you push a tag that starts with 'v' (like v1.0.0, v0.2.1-beta, etc.)
#
# WHAT IT DOES:
# 1. Builds your Python package (wheel and source distribution)
# 2. Runs your full test suite to ensure quality
# 3. Validates the package meets PyPI standards
# 4. Publishes to Test PyPI (https://test.pypi.org)
# 5. Builds and deploys documentation to GitHub Pages
#
# WHY USE TEST PYPI:
# - Test your package installation without affecting the real PyPI
# - Verify metadata, description, and dependencies work correctly
# - Practice the release process safely
# - Test that users can actually install and use your package
# =============================================================================

name: Test Release to PyPI

# =============================================================================
# WORKFLOW TRIGGERS
# =============================================================================
# Define exactly when this workflow should run
on:
  release:
    types: [published]              # Run when you publish a GitHub Release
  push:
    tags:
      - 'v*'                       # Run when you push any tag starting with 'v'
  # Note: You can also trigger this manually from GitHub Actions tab if needed

# =============================================================================
# WORKFLOW JOBS
# =============================================================================
jobs:

  # ===========================================================================
  # JOB 1: BUILD AND PUBLISH TO TEST PYPI
  # ===========================================================================
  test-release:
    name: Build and Publish to Test PyPI
    runs-on: ubuntu-latest
    environment: release           # Use GitHub environment for additional security
    # The 'release' environment allows you to add protection rules like:
    # - Require manual approval before deployment
    # - Restrict which branches can deploy
    # - Add additional reviewers

    steps:
    # -------------------------------------------------------------------------
    # STEP 1: Download repository content
    # -------------------------------------------------------------------------
    - name: Checkout code
      uses: actions/checkout@v4
      # This downloads your entire repository to the GitHub Actions runner
      # Includes all your source code, tests, documentation, etc.

    # -------------------------------------------------------------------------
    # STEP 2: Set up Python environment
    # -------------------------------------------------------------------------
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'    # Use Python 3.12 for building (latest stable)
      # This installs Python and makes it available for subsequent steps

    # -------------------------------------------------------------------------
    # STEP 3: Install Poetry dependency manager
    # -------------------------------------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest           # Always use the latest Poetry version
        virtualenvs-create: true  # Create isolated virtual environments
        virtualenvs-in-project: true  # Keep .venv in project directory
      # Poetry manages dependencies and builds your package

    # -------------------------------------------------------------------------
    # STEP 4: Configure Poetry for Test PyPI authentication
    # -------------------------------------------------------------------------
    - name: Configure Poetry for Test PyPI
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
      # First line: Add Test PyPI as a custom repository named 'testpypi'
      # Second line: Set up authentication using your Test PyPI API token
      # The token is stored securely in GitHub Secrets

    # -------------------------------------------------------------------------
    # STEP 5: Install all project dependencies
    # -------------------------------------------------------------------------
    - name: Install dependencies
      run: |
        poetry install
      # Installs all dependencies from pyproject.toml including dev dependencies
      # This ensures we have everything needed for testing and building

    # -------------------------------------------------------------------------
    # STEP 6: Run comprehensive test suite
    # -------------------------------------------------------------------------
    - name: Run full test suite
      run: |
        poetry run pytest --cov=knitout_to_dat_python --cov-report=term-missing -v
      # Run all tests with coverage reporting before releasing
      # --cov=knitout_to_dat_python: Measure coverage for your package
      # --cov-report=term-missing: Show which lines aren't covered
      # -v: Verbose output showing individual test results
      # If ANY test fails, the workflow stops here (prevents broken releases)

    # -------------------------------------------------------------------------
    # STEP 7: Build the package
    # -------------------------------------------------------------------------
    - name: Build package
      run: |
        poetry build
      # This creates two files in the dist/ directory:
      # 1. A wheel file (.whl) - binary distribution for faster installation
      # 2. A source distribution (.tar.gz) - source code archive
      # Both will be uploaded to Test PyPI

    # -------------------------------------------------------------------------
    # STEP 8: Validate package before uploading
    # -------------------------------------------------------------------------
    - name: Check package quality
      run: |
        poetry run pip install twine
        poetry run twine check dist/*
      # Twine validates that your package:
      # - Has correct metadata format
      # - README renders properly on PyPI
      # - All required fields are present
      # - Package structure follows PyPI requirements

    # -------------------------------------------------------------------------
    # STEP 9: Publish to Test PyPI
    # -------------------------------------------------------------------------
    - name: Publish to Test PyPI
      run: |
        poetry publish -r testpypi
      # Uploads your package to Test PyPI (https://test.pypi.org)
      # -r testpypi: Use the 'testpypi' repository we configured earlier
      # After this step, your package will be available for testing:
      # pip install --index-url https://test.pypi.org/simple/ knitout-to-dat-python

    # -------------------------------------------------------------------------
    # STEP 10: Save build artifacts
    # -------------------------------------------------------------------------
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-release-dist     # Name for the artifact collection
        path: dist/                 # Upload the entire dist/ directory
        retention-days: 30          # Keep artifacts for 30 days
      # This saves your built package files so you can:
      # - Download them later if needed
      # - Inspect exactly what was released
      # - Debug any issues

  # ===========================================================================
  # JOB 2: BUILD DOCUMENTATION (For Verification Only)
  # ===========================================================================
  # NOTE: GitHub Pages is not available for private repositories
  # This job builds documentation to verify it works, but doesn't deploy it
  docs-build:
    name: Build Documentation (Verification Only)
    runs-on: ubuntu-latest
    needs: test-release            # Only run after successful package release

    steps:
    # -------------------------------------------------------------------------
    # STEP 1: Get repository content
    # -------------------------------------------------------------------------
    - name: Checkout code
      uses: actions/checkout@v4

    # -------------------------------------------------------------------------
    # STEP 2: Set up Python for documentation building
    # -------------------------------------------------------------------------
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # -------------------------------------------------------------------------
    # STEP 3: Install Poetry
    # -------------------------------------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1

    # -------------------------------------------------------------------------
    # STEP 4: Install documentation dependencies
    # -------------------------------------------------------------------------
    - name: Install dependencies with documentation tools
      run: |
        poetry install --with=docs
      # --with=docs includes the documentation dependency group from pyproject.toml
      # This installs Sphinx, themes, and other doc-building tools

    # -------------------------------------------------------------------------
    # STEP 5: Build documentation with Sphinx (verification only)
    # -------------------------------------------------------------------------
    - name: Build documentation
      run: |
        poetry run sphinx-build -b html docs/source docs/build/html -W
      # sphinx-build: Main documentation building command
      # -b html: Build HTML output (web-ready documentation)
      # docs/source: Input directory with your .rst/.md documentation files
      # docs/build/html: Output directory for built HTML files
      # -W: Treat warnings as errors (ensures clean documentation)

    # -------------------------------------------------------------------------
    # STEP 6: Save documentation as artifact
    # -------------------------------------------------------------------------
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: built-documentation    # Name for the artifact collection
        path: docs/build/html/       # Upload the built HTML documentation
        retention-days: 30           # Keep documentation for 30 days
      # This saves your built documentation so you can:
      # - Download and view it locally
      # - Verify it builds correctly
      # - Deploy manually to other hosting services if needed

# =============================================================================
# WHAT YOU NEED TO SET UP FOR THIS WORKFLOW TO WORK
# =============================================================================
#
# 1. GITHUB SECRETS (configured in repository settings):
#    - TEST_PYPI_API_TOKEN: Your Test PyPI API token
#
# 2. GITHUB ENVIRONMENT (optional but recommended):
#    - Create 'release' environment in repository settings
#    - Add protection rules like requiring manual approval
#
# 3. REPOSITORY STRUCTURE:
#    - docs/source/ directory with Sphinx documentation (optional)
#    - tests/ directory with pytest tests
#    - src/knitout_to_dat_python/ with your package code
#
# 4. TEST PYPI ACCOUNT:
#    - Account at https://test.pypi.org
#    - API token generated for your account
#
# NOTE: GitHub Pages is not available for private repositories
# Documentation is built and saved as artifacts for verification only
#
# =============================================================================

# =============================================================================
# HOW TO USE THIS WORKFLOW
# =============================================================================
#
# METHOD 1 - Create a GitHub Release:
# 1. Go to your repository on GitHub
# 2. Click "Releases" → "Create a new release"
# 3. Choose a tag (like v0.1.0) and title
# 4. Write release notes describing changes
# 5. Click "Publish release"
# 6. Workflow runs automatically
#
# METHOD 2 - Push a version tag:
# 1. Locally: git tag v0.1.0
# 2. Push: git push origin v0.1.0
# 3. Workflow runs automatically
#
# AFTER WORKFLOW COMPLETES:
# 1. Check Test PyPI: https://test.pypi.org/project/knitout-to-dat-python/
# 2. Test installation: pip install --index-url https://test.pypi.org/simple/ knitout-to-dat-python
# 3. Download documentation artifact from GitHub Actions to view locally
# 4. If everything works, proceed with real PyPI release
#
# WHEN YOU MAKE THE REPOSITORY PUBLIC:
# - You can then enable GitHub Pages and deploy documentation automatically
# - Update the workflow to include GitHub Pages deployment
#
# =============================================================================
