# =============================================================================
# AUTOMATED DEPENDENCY UPDATES WORKFLOW
# =============================================================================
# This workflow automatically checks for updates to your project dependencies
# and creates a Pull Request (PR) with the updates for you to review.
#
# WHAT IT DOES:
# 1. Updates all dependencies to their latest compatible versions
# 2. Runs your tests to make sure nothing breaks
# 3. Checks for security vulnerabilities in dependencies
# 4. Creates a Pull Request with the changes for you to review
#
# WHEN IT RUNS:
# - Every Monday at 10 AM UTC (weekly dependency check)
# - Manually when you click "Run workflow" in GitHub Actions tab
# =============================================================================

name: Update Dependencies

# When to run this workflow
on:
  schedule:
    - cron: '0 10 * * 1'  # Every Monday at 10 AM UTC
  workflow_dispatch:      # Allows manual triggering from GitHub UI
    # workflow_dispatch means you can go to Actions tab and click "Run workflow"

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest

    steps:
    # -------------------------------------------------------------------------
    # STEP 1: Get the code and set up authentication
    # -------------------------------------------------------------------------
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # Allows the workflow to create PRs
        # GITHUB_TOKEN is automatically provided by GitHub - no setup needed

    # -------------------------------------------------------------------------
    # STEP 2: Set up Python environment
    # -------------------------------------------------------------------------
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # -------------------------------------------------------------------------
    # STEP 3: Install Poetry
    # -------------------------------------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    # -------------------------------------------------------------------------
    # STEP 4: Update all dependencies to latest compatible versions
    # -------------------------------------------------------------------------
    - name: Update dependencies
      run: |
        poetry update
      # This command:
      # - Reads your pyproject.toml version constraints (e.g., "^1.0")
      # - Finds the latest versions that satisfy those constraints
      # - Updates poetry.lock with the new versions
      # - Does NOT change your pyproject.toml version requirements

    # -------------------------------------------------------------------------
    # STEP 5: Install updated dependencies and run tests with unittest
    # -------------------------------------------------------------------------
    - name: Install updated dependencies
      run: |
        poetry install

    - name: Run tests with updated dependencies
      run: |
        poetry run coverage run -m unittest discover tests -p "test_*.py" -v
        poetry run coverage report -m
      # Run your test suite using unittest to make sure the updated dependencies don't break anything
      # coverage run: Run unittest with coverage measurement
      # -m unittest discover: Use unittest's test discovery
      # tests: Directory containing test files
      # -p "test_*.py": Pattern to match test files
      # -v: Verbose output (shows individual test names)
      # coverage report -m: Show coverage report with missing lines

    # -------------------------------------------------------------------------
    # STEP 6: Check for security vulnerabilities (OPTIONAL)
    # -------------------------------------------------------------------------
    - name: Check for security vulnerabilities
      run: |
        poetry run safety check
      # Safety scans your dependencies for known security issues
      # This step will fail if vulnerabilities are found, preventing the PR creation
      # If you don't want this check, you can remove this entire step

    # -------------------------------------------------------------------------
    # STEP 7: Create a Pull Request with the updates
    # -------------------------------------------------------------------------
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5  # Third-party action for creating PRs
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'deps: update dependencies'  # Commit message for the changes
        title: 'Automated dependency update'         # PR title
        body: |
          This Pull Request updates project dependencies to their latest compatible versions.

          ## What Changed
          - Updated Poetry lock file (`poetry.lock`) with latest compatible versions
          - All existing tests pass with the updated dependencies using unittest
          - Security vulnerability check completed successfully

          ## What You Should Do
          1. Review the changes in the "Files changed" tab
          2. Check which dependencies were updated and by how much
          3. If everything looks good, click "Merge pull request"
          4. If there are issues, you can close this PR without merging

          ## Auto-generated by GitHub Actions
          This PR was created automatically by the dependency update workflow.
        branch: automated-dependency-update        # Name of the branch for this PR
        delete-branch: true                        # Delete the branch after merging

# =============================================================================
# WHAT THIS WORKFLOW NEEDS TO WORK
# =============================================================================
# 1. Your pyproject.toml should have proper version constraints like:
#    requests = "^2.28.0"  # This allows updates to 2.28.x, 2.29.x, etc.
#    not: requests = "2.28.0"  # This would prevent any updates
#
# 2. You need the 'safety' package in your dev dependencies:
#    [tool.poetry.group.dev.dependencies]
#    safety = "^2.0"
#
# 3. You need working tests that run with unittest discovery
#
# 4. The GITHUB_TOKEN is automatically provided - no setup needed
# =============================================================================

# =============================================================================
# HOW TO USE THIS
# =============================================================================
# 1. This runs automatically every Monday
# 2. When it finds updates, it creates a PR for you to review
# 3. Go to your repository's "Pull requests" tab to see the PR
# 4. Review the changes, then merge if everything looks good
# 5. You can also run this manually:
#    - Go to Actions tab in your GitHub repository
#    - Click on "Update Dependencies" workflow
#    - Click "Run workflow" button
# =============================================================================
