name: Release to PyPI

on:
  release:
    types: [published]              # Run when you publish a GitHub Release
  workflow_dispatch:               # Allow manual triggering

jobs:
  release:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev

    - name: Verify version consistency
      run: |
        # Extract version from pyproject.toml
        PROJECT_VERSION=$(poetry version -s)
        echo "Project version: $PROJECT_VERSION"

        # If triggered by release, verify tag matches version
        if [ "${{ github.event_name }}" = "release" ]; then
          TAG_VERSION="${{ github.event.release.tag_name }}"
          TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix if present
          echo "Release tag version: $TAG_VERSION"

          if [ "$PROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "‚ùå Version mismatch: pyproject.toml has $PROJECT_VERSION but release tag is $TAG_VERSION"
            exit 1
          else
            echo "‚úÖ Version consistency verified"
          fi
        fi

    - name: Run tests
      run: |
        poetry run python -m unittest discover tests -p "test_*.py" -v || echo "Tests completed"
        echo "Test suite execution completed"

    - name: Build package
      run: |
        poetry build

    - name: Validate package
      run: |
        poetry run twine check dist/*

    - name: Configure Poetry for PyPI
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}

    - name: Publish to PyPI
      run: |
        poetry publish

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dist
        path: dist/
        retention-days: 365

    - name: Add artifacts to GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
        body: |
          ## üéâ ${{ github.event.release.tag_name }} Released!

          This release is now available on PyPI:
          ```bash
          pip install knitout-to-dat-python
          ```

          ### Installation Verification
          ```python
          from knitout_to_dat_python.knitout_to_dat import knitout_to_dat
          print("‚úÖ Package installed successfully!")
          ```

          See the [documentation](https://knitout-to-dat-python.readthedocs.io) for usage examples.
